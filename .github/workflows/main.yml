name: Combined CI Workflow

on:
  push:
    branches: [main, dev, quality-assurance]
  pull_request:
    branches: [main, dev, quality-assurance]

jobs:
  go-standard-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.3'

      - name: Install Protobuf Compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler

      - name: Install protoc-gen-go and protoc-gen-go-grpc
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.36.0
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.3.0

      - name: Add Go bin to PATH
        run: echo "${HOME}/go/bin" >> $GITHUB_PATH

      - name: Generate Proto Files
        working-directory: ./protos
        run: protoc --go_out=gen --go-grpc_out=gen *.proto

      - name: Run unit tests in api-gateway
        working-directory: ./api-gateway
        run: |
          go mod tidy
          go test -v ./...

  python-standard-check:
    needs: go-standard-check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sumolib traci
          pip install flake8 pytest pytest-mock pytest-cov black

      - name: Install SUMO
        run: sudo apt-get update && sudo apt-get install -y sumo sumo-tools sumo-doc

      - name: Set SUMO_HOME
        run: echo "SUMO_HOME=/path/to/sumo/home" >> $GITHUB_ENV

      - name: Run Linting with Flake8
        run: flake8 simulation-service --ignore=E501,W503

      - name: Check Python formatting with Black
        run: black --check --exclude "/protos/" .

      - name: Create results directory
        run: mkdir -p out/results

      - name: Run Tests with coverage using Pytest
        run: pytest --cov=SimLoad --cov-report=term-missing simulation-service/tests/

  react-standard-check:
    needs: python-standard-check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run ESLint
        working-directory: frontend
        run: npx eslint "src/**/*.{js,jsx,ts,tsx}"

      - name: Check Prettier formatting
        working-directory: frontend
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,css,md}"

      - name: Run Jest tests
        working-directory: frontend
        run: npx jest --passWithNoTests
