name: CI Lint, Format, and Test Workflow

on:
  push:
    branches: [main, dev, quality-assurance]
  pull_request:
    branches: [main, dev, quality-assurance]

jobs:
  # ====== Linting ======

  lint-go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.3'

      - name: Run Go lint (go vet + go fmt check)
        working-directory: ./api-gateway
        run: |
          go mod tidy
          go vet ./...
          gofmt -l .

  lint-python:
    runs-on: ubuntu-latest
    needs: lint-go
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install linting dependencies
        run: pip install flake8

      - name: Run Python linting with flake8
        run: flake8 simulation-service --ignore=E501,W503

  lint-react:
    runs-on: ubuntu-latest
    needs: lint-python
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run ESLint
        working-directory: frontend
        run: npx eslint "src/**/*.{js,jsx,ts,tsx}"


  # ====== Formatting ======

  format-go:
    runs-on: ubuntu-latest
    needs: lint-react
    steps:
      - uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.3'

      - name: Check Go formatting
        working-directory: ./api-gateway
        run: gofmt -l .

  format-python:
    runs-on: ubuntu-latest
    needs: format-go
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install black
        run: pip install black

      - name: Check Python formatting with Black
        run: black --check --exclude "/protos/" .

  format-react:
    runs-on: ubuntu-latest
    needs: format-python
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Check Prettier formatting
        working-directory: frontend
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"


  # ====== Testing ======

  test-go:
    runs-on: ubuntu-latest
    needs: format-react
    steps:
      - uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.3'

      - name: Run Go tests
        working-directory: ./api-gateway
        run: |
          go mod tidy
          go test -v ./...

  test-python:
    runs-on: ubuntu-latest
    needs: test-go
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install test dependencies
        run: |
          pip install sumolib traci pytest pytest-mock pytest-cov

      - name: Install SUMO
        run: sudo apt-get update && sudo apt-get install -y sumo sumo-tools sumo-doc

      - name: Set SUMO_HOME
        run: echo "SUMO_HOME=/path/to/sumo/home" >> $GITHUB_ENV

      - name: Run Python tests with coverage
        run: pytest --cov=SimLoad --cov-report=term-missing simulation-service/tests/

  test-react:
    runs-on: ubuntu-latest
    needs: test-python
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run Jest tests
        working-directory: frontend
        run: npx jest --passWithNoTests
