// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/COS301-SE-2025/Swift-Signals/user-service/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// AddIntersectionID provides a mock function with given fields: ctx, userID, intersectionID
func (_m *MockUserService) AddIntersectionID(ctx context.Context, userID string, intersectionID string) error {
	ret := _m.Called(ctx, userID, intersectionID)

	if len(ret) == 0 {
		panic("no return value specified for AddIntersectionID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, intersectionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_AddIntersectionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddIntersectionID'
type MockUserService_AddIntersectionID_Call struct {
	*mock.Call
}

// AddIntersectionID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - intersectionID string
func (_e *MockUserService_Expecter) AddIntersectionID(ctx interface{}, userID interface{}, intersectionID interface{}) *MockUserService_AddIntersectionID_Call {
	return &MockUserService_AddIntersectionID_Call{Call: _e.mock.On("AddIntersectionID", ctx, userID, intersectionID)}
}

func (_c *MockUserService_AddIntersectionID_Call) Run(run func(ctx context.Context, userID string, intersectionID string)) *MockUserService_AddIntersectionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_AddIntersectionID_Call) Return(_a0 error) *MockUserService_AddIntersectionID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_AddIntersectionID_Call) RunAndReturn(run func(context.Context, string, string) error) *MockUserService_AddIntersectionID_Call {
	_c.Call.Return(run)
	return _c
}

// ChangePassword provides a mock function with given fields: ctx, userID, currentPassword, newPassword
func (_m *MockUserService) ChangePassword(ctx context.Context, userID string, currentPassword string, newPassword string) error {
	ret := _m.Called(ctx, userID, currentPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, userID, currentPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type MockUserService_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - currentPassword string
//   - newPassword string
func (_e *MockUserService_Expecter) ChangePassword(ctx interface{}, userID interface{}, currentPassword interface{}, newPassword interface{}) *MockUserService_ChangePassword_Call {
	return &MockUserService_ChangePassword_Call{Call: _e.mock.On("ChangePassword", ctx, userID, currentPassword, newPassword)}
}

func (_c *MockUserService_ChangePassword_Call) Run(run func(ctx context.Context, userID string, currentPassword string, newPassword string)) *MockUserService_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUserService_ChangePassword_Call) Return(_a0 error) *MockUserService_ChangePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_ChangePassword_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockUserService_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *MockUserService) DeleteUser(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserService_Expecter) DeleteUser(ctx interface{}, userID interface{}) *MockUserService_DeleteUser_Call {
	return &MockUserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, userID)}
}

func (_c *MockUserService_DeleteUser_Call) Run(run func(ctx context.Context, userID string)) *MockUserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_DeleteUser_Call) Return(_a0 error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields: ctx, page, pageSize, filter
func (_m *MockUserService) GetAllUsers(ctx context.Context, page int32, pageSize int32, filter string) ([]*model.User, error) {
	ret := _m.Called(ctx, page, pageSize, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []*model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, string) ([]*model.User, error)); ok {
		return rf(ctx, page, pageSize, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, string) []*model.User); ok {
		r0 = rf(ctx, page, pageSize, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, string) error); ok {
		r1 = rf(ctx, page, pageSize, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockUserService_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - page int32
//   - pageSize int32
//   - filter string
func (_e *MockUserService_Expecter) GetAllUsers(ctx interface{}, page interface{}, pageSize interface{}, filter interface{}) *MockUserService_GetAllUsers_Call {
	return &MockUserService_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx, page, pageSize, filter)}
}

func (_c *MockUserService_GetAllUsers_Call) Run(run func(ctx context.Context, page int32, pageSize int32, filter string)) *MockUserService_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(int32), args[3].(string))
	})
	return _c
}

func (_c *MockUserService_GetAllUsers_Call) Return(_a0 []*model.User, _a1 error) *MockUserService_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetAllUsers_Call) RunAndReturn(run func(context.Context, int32, int32, string) ([]*model.User, error)) *MockUserService_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserService) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserService_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserService_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserService_GetUserByEmail_Call {
	return &MockUserService_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserService_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserService_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_GetUserByEmail_Call) Return(_a0 *model.User, _a1 error) *MockUserService_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *MockUserService_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *MockUserService) GetUserByID(ctx context.Context, userID string) (*model.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserService_Expecter) GetUserByID(ctx interface{}, userID interface{}) *MockUserService_GetUserByID_Call {
	return &MockUserService_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, userID)}
}

func (_c *MockUserService_GetUserByID_Call) Run(run func(ctx context.Context, userID string)) *MockUserService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_GetUserByID_Call) Return(_a0 *model.User, _a1 error) *MockUserService_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUserByID_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *MockUserService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserIntersectionIDs provides a mock function with given fields: ctx, userID
func (_m *MockUserService) GetUserIntersectionIDs(ctx context.Context, userID string) ([]string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIntersectionIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUserIntersectionIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserIntersectionIDs'
type MockUserService_GetUserIntersectionIDs_Call struct {
	*mock.Call
}

// GetUserIntersectionIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserService_Expecter) GetUserIntersectionIDs(ctx interface{}, userID interface{}) *MockUserService_GetUserIntersectionIDs_Call {
	return &MockUserService_GetUserIntersectionIDs_Call{Call: _e.mock.On("GetUserIntersectionIDs", ctx, userID)}
}

func (_c *MockUserService_GetUserIntersectionIDs_Call) Run(run func(ctx context.Context, userID string)) *MockUserService_GetUserIntersectionIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_GetUserIntersectionIDs_Call) Return(_a0 []string, _a1 error) *MockUserService_GetUserIntersectionIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUserIntersectionIDs_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *MockUserService_GetUserIntersectionIDs_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function with given fields: ctx, email, password
func (_m *MockUserService) LoginUser(ctx context.Context, email string, password string) (string, time.Time, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 string
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, time.Time, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) time.Time); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserService_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type MockUserService_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *MockUserService_Expecter) LoginUser(ctx interface{}, email interface{}, password interface{}) *MockUserService_LoginUser_Call {
	return &MockUserService_LoginUser_Call{Call: _e.mock.On("LoginUser", ctx, email, password)}
}

func (_c *MockUserService_LoginUser_Call) Run(run func(ctx context.Context, email string, password string)) *MockUserService_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_LoginUser_Call) Return(_a0 string, _a1 time.Time, _a2 error) *MockUserService_LoginUser_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserService_LoginUser_Call) RunAndReturn(run func(context.Context, string, string) (string, time.Time, error)) *MockUserService_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// LogoutUser provides a mock function with given fields: ctx, userID
func (_m *MockUserService) LogoutUser(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for LogoutUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_LogoutUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogoutUser'
type MockUserService_LogoutUser_Call struct {
	*mock.Call
}

// LogoutUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserService_Expecter) LogoutUser(ctx interface{}, userID interface{}) *MockUserService_LogoutUser_Call {
	return &MockUserService_LogoutUser_Call{Call: _e.mock.On("LogoutUser", ctx, userID)}
}

func (_c *MockUserService_LogoutUser_Call) Run(run func(ctx context.Context, userID string)) *MockUserService_LogoutUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_LogoutUser_Call) Return(_a0 error) *MockUserService_LogoutUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_LogoutUser_Call) RunAndReturn(run func(context.Context, string) error) *MockUserService_LogoutUser_Call {
	_c.Call.Return(run)
	return _c
}

// MakeAdmin provides a mock function with given fields: ctx, userID, adminUserID
func (_m *MockUserService) MakeAdmin(ctx context.Context, userID string, adminUserID string) error {
	ret := _m.Called(ctx, userID, adminUserID)

	if len(ret) == 0 {
		panic("no return value specified for MakeAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, adminUserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_MakeAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeAdmin'
type MockUserService_MakeAdmin_Call struct {
	*mock.Call
}

// MakeAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - adminUserID string
func (_e *MockUserService_Expecter) MakeAdmin(ctx interface{}, userID interface{}, adminUserID interface{}) *MockUserService_MakeAdmin_Call {
	return &MockUserService_MakeAdmin_Call{Call: _e.mock.On("MakeAdmin", ctx, userID, adminUserID)}
}

func (_c *MockUserService_MakeAdmin_Call) Run(run func(ctx context.Context, userID string, adminUserID string)) *MockUserService_MakeAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_MakeAdmin_Call) Return(_a0 error) *MockUserService_MakeAdmin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_MakeAdmin_Call) RunAndReturn(run func(context.Context, string, string) error) *MockUserService_MakeAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, name, email, password
func (_m *MockUserService) RegisterUser(ctx context.Context, name string, email string, password string) (*model.User, error) {
	ret := _m.Called(ctx, name, email, password)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*model.User, error)); ok {
		return rf(ctx, name, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *model.User); ok {
		r0 = rf(ctx, name, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockUserService_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - email string
//   - password string
func (_e *MockUserService_Expecter) RegisterUser(ctx interface{}, name interface{}, email interface{}, password interface{}) *MockUserService_RegisterUser_Call {
	return &MockUserService_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, name, email, password)}
}

func (_c *MockUserService_RegisterUser_Call) Run(run func(ctx context.Context, name string, email string, password string)) *MockUserService_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUserService_RegisterUser_Call) Return(_a0 *model.User, _a1 error) *MockUserService_RegisterUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_RegisterUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*model.User, error)) *MockUserService_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAdmin provides a mock function with given fields: ctx, userID, adminUserID
func (_m *MockUserService) RemoveAdmin(ctx context.Context, userID string, adminUserID string) error {
	ret := _m.Called(ctx, userID, adminUserID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, adminUserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_RemoveAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAdmin'
type MockUserService_RemoveAdmin_Call struct {
	*mock.Call
}

// RemoveAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - adminUserID string
func (_e *MockUserService_Expecter) RemoveAdmin(ctx interface{}, userID interface{}, adminUserID interface{}) *MockUserService_RemoveAdmin_Call {
	return &MockUserService_RemoveAdmin_Call{Call: _e.mock.On("RemoveAdmin", ctx, userID, adminUserID)}
}

func (_c *MockUserService_RemoveAdmin_Call) Run(run func(ctx context.Context, userID string, adminUserID string)) *MockUserService_RemoveAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_RemoveAdmin_Call) Return(_a0 error) *MockUserService_RemoveAdmin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_RemoveAdmin_Call) RunAndReturn(run func(context.Context, string, string) error) *MockUserService_RemoveAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIntersectionIDs provides a mock function with given fields: ctx, userID, intersectionIDs
func (_m *MockUserService) RemoveIntersectionIDs(ctx context.Context, userID string, intersectionIDs []string) error {
	ret := _m.Called(ctx, userID, intersectionIDs)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIntersectionIDs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, userID, intersectionIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_RemoveIntersectionIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIntersectionIDs'
type MockUserService_RemoveIntersectionIDs_Call struct {
	*mock.Call
}

// RemoveIntersectionIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - intersectionIDs []string
func (_e *MockUserService_Expecter) RemoveIntersectionIDs(ctx interface{}, userID interface{}, intersectionIDs interface{}) *MockUserService_RemoveIntersectionIDs_Call {
	return &MockUserService_RemoveIntersectionIDs_Call{Call: _e.mock.On("RemoveIntersectionIDs", ctx, userID, intersectionIDs)}
}

func (_c *MockUserService_RemoveIntersectionIDs_Call) Run(run func(ctx context.Context, userID string, intersectionIDs []string)) *MockUserService_RemoveIntersectionIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockUserService_RemoveIntersectionIDs_Call) Return(_a0 error) *MockUserService_RemoveIntersectionIDs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_RemoveIntersectionIDs_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockUserService_RemoveIntersectionIDs_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: ctx, email
func (_m *MockUserService) ResetPassword(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockUserService_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserService_Expecter) ResetPassword(ctx interface{}, email interface{}) *MockUserService_ResetPassword_Call {
	return &MockUserService_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, email)}
}

func (_c *MockUserService_ResetPassword_Call) Run(run func(ctx context.Context, email string)) *MockUserService_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_ResetPassword_Call) Return(_a0 error) *MockUserService_ResetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_ResetPassword_Call) RunAndReturn(run func(context.Context, string) error) *MockUserService_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, userID, name, email
func (_m *MockUserService) UpdateUser(ctx context.Context, userID string, name string, email string) (*model.User, error) {
	ret := _m.Called(ctx, userID, name, email)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*model.User, error)); ok {
		return rf(ctx, userID, name, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *model.User); ok {
		r0 = rf(ctx, userID, name, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userID, name, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - name string
//   - email string
func (_e *MockUserService_Expecter) UpdateUser(ctx interface{}, userID interface{}, name interface{}, email interface{}) *MockUserService_UpdateUser_Call {
	return &MockUserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, userID, name, email)}
}

func (_c *MockUserService_UpdateUser_Call) Run(run func(ctx context.Context, userID string, name string, email string)) *MockUserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUserService_UpdateUser_Call) Return(_a0 *model.User, _a1 error) *MockUserService_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_UpdateUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*model.User, error)) *MockUserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
