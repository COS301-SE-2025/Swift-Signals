// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	user "github.com/COS301-SE-2025/Swift-Signals/protos/gen/user"
)

// MockUserClientInterface is an autogenerated mock type for the UserClientInterface type
type MockUserClientInterface struct {
	mock.Mock
}

type MockUserClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserClientInterface) EXPECT() *MockUserClientInterface_Expecter {
	return &MockUserClientInterface_Expecter{mock: &_m.Mock}
}

// ChangePassword provides a mock function with given fields: ctx, userID, current_password, new_password
func (_m *MockUserClientInterface) ChangePassword(ctx context.Context, userID string, current_password string, new_password string) (*emptypb.Empty, error) {
	ret := _m.Called(ctx, userID, current_password, new_password)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*emptypb.Empty, error)); ok {
		return rf(ctx, userID, current_password, new_password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *emptypb.Empty); ok {
		r0 = rf(ctx, userID, current_password, new_password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userID, current_password, new_password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type MockUserClientInterface_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - current_password string
//   - new_password string
func (_e *MockUserClientInterface_Expecter) ChangePassword(ctx interface{}, userID interface{}, current_password interface{}, new_password interface{}) *MockUserClientInterface_ChangePassword_Call {
	return &MockUserClientInterface_ChangePassword_Call{Call: _e.mock.On("ChangePassword", ctx, userID, current_password, new_password)}
}

func (_c *MockUserClientInterface_ChangePassword_Call) Run(run func(ctx context.Context, userID string, current_password string, new_password string)) *MockUserClientInterface_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUserClientInterface_ChangePassword_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserClientInterface_ChangePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_ChangePassword_Call) RunAndReturn(run func(context.Context, string, string, string) (*emptypb.Empty, error)) *MockUserClientInterface_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *MockUserClientInterface) DeleteUser(ctx context.Context, userID string) (*emptypb.Empty, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*emptypb.Empty, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *emptypb.Empty); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserClientInterface_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserClientInterface_Expecter) DeleteUser(ctx interface{}, userID interface{}) *MockUserClientInterface_DeleteUser_Call {
	return &MockUserClientInterface_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, userID)}
}

func (_c *MockUserClientInterface_DeleteUser_Call) Run(run func(ctx context.Context, userID string)) *MockUserClientInterface_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserClientInterface_DeleteUser_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserClientInterface_DeleteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_DeleteUser_Call) RunAndReturn(run func(context.Context, string) (*emptypb.Empty, error)) *MockUserClientInterface_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields: ctx, page, page_size, filter
func (_m *MockUserClientInterface) GetAllUsers(ctx context.Context, page int32, page_size int32, filter string) (user.UserService_GetAllUsersClient, error) {
	ret := _m.Called(ctx, page, page_size, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 user.UserService_GetAllUsersClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, string) (user.UserService_GetAllUsersClient, error)); ok {
		return rf(ctx, page, page_size, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, string) user.UserService_GetAllUsersClient); ok {
		r0 = rf(ctx, page, page_size, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user.UserService_GetAllUsersClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, string) error); ok {
		r1 = rf(ctx, page, page_size, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockUserClientInterface_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - page int32
//   - page_size int32
//   - filter string
func (_e *MockUserClientInterface_Expecter) GetAllUsers(ctx interface{}, page interface{}, page_size interface{}, filter interface{}) *MockUserClientInterface_GetAllUsers_Call {
	return &MockUserClientInterface_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx, page, page_size, filter)}
}

func (_c *MockUserClientInterface_GetAllUsers_Call) Run(run func(ctx context.Context, page int32, page_size int32, filter string)) *MockUserClientInterface_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(int32), args[3].(string))
	})
	return _c
}

func (_c *MockUserClientInterface_GetAllUsers_Call) Return(_a0 user.UserService_GetAllUsersClient, _a1 error) *MockUserClientInterface_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_GetAllUsers_Call) RunAndReturn(run func(context.Context, int32, int32, string) (user.UserService_GetAllUsersClient, error)) *MockUserClientInterface_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserClientInterface) GetUserByEmail(ctx context.Context, email string) (*user.UserResponse, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *user.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*user.UserResponse, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.UserResponse); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserClientInterface_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserClientInterface_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserClientInterface_GetUserByEmail_Call {
	return &MockUserClientInterface_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserClientInterface_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserClientInterface_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserClientInterface_GetUserByEmail_Call) Return(_a0 *user.UserResponse, _a1 error) *MockUserClientInterface_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*user.UserResponse, error)) *MockUserClientInterface_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *MockUserClientInterface) GetUserByID(ctx context.Context, userID string) (*user.UserResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *user.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*user.UserResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.UserResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserClientInterface_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserClientInterface_Expecter) GetUserByID(ctx interface{}, userID interface{}) *MockUserClientInterface_GetUserByID_Call {
	return &MockUserClientInterface_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, userID)}
}

func (_c *MockUserClientInterface_GetUserByID_Call) Run(run func(ctx context.Context, userID string)) *MockUserClientInterface_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserClientInterface_GetUserByID_Call) Return(_a0 *user.UserResponse, _a1 error) *MockUserClientInterface_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_GetUserByID_Call) RunAndReturn(run func(context.Context, string) (*user.UserResponse, error)) *MockUserClientInterface_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserIntersectionIDs provides a mock function with given fields: ctx, userID
func (_m *MockUserClientInterface) GetUserIntersectionIDs(ctx context.Context, userID string) (user.UserService_GetUserIntersectionIDsClient, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIntersectionIDs")
	}

	var r0 user.UserService_GetUserIntersectionIDsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (user.UserService_GetUserIntersectionIDsClient, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) user.UserService_GetUserIntersectionIDsClient); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user.UserService_GetUserIntersectionIDsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_GetUserIntersectionIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserIntersectionIDs'
type MockUserClientInterface_GetUserIntersectionIDs_Call struct {
	*mock.Call
}

// GetUserIntersectionIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserClientInterface_Expecter) GetUserIntersectionIDs(ctx interface{}, userID interface{}) *MockUserClientInterface_GetUserIntersectionIDs_Call {
	return &MockUserClientInterface_GetUserIntersectionIDs_Call{Call: _e.mock.On("GetUserIntersectionIDs", ctx, userID)}
}

func (_c *MockUserClientInterface_GetUserIntersectionIDs_Call) Run(run func(ctx context.Context, userID string)) *MockUserClientInterface_GetUserIntersectionIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserClientInterface_GetUserIntersectionIDs_Call) Return(_a0 user.UserService_GetUserIntersectionIDsClient, _a1 error) *MockUserClientInterface_GetUserIntersectionIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_GetUserIntersectionIDs_Call) RunAndReturn(run func(context.Context, string) (user.UserService_GetUserIntersectionIDsClient, error)) *MockUserClientInterface_GetUserIntersectionIDs_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function with given fields: ctx, email, password
func (_m *MockUserClientInterface) LoginUser(ctx context.Context, email string, password string) (*user.LoginUserResponse, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 *user.LoginUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*user.LoginUserResponse, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *user.LoginUserResponse); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.LoginUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type MockUserClientInterface_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *MockUserClientInterface_Expecter) LoginUser(ctx interface{}, email interface{}, password interface{}) *MockUserClientInterface_LoginUser_Call {
	return &MockUserClientInterface_LoginUser_Call{Call: _e.mock.On("LoginUser", ctx, email, password)}
}

func (_c *MockUserClientInterface_LoginUser_Call) Run(run func(ctx context.Context, email string, password string)) *MockUserClientInterface_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserClientInterface_LoginUser_Call) Return(_a0 *user.LoginUserResponse, _a1 error) *MockUserClientInterface_LoginUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_LoginUser_Call) RunAndReturn(run func(context.Context, string, string) (*user.LoginUserResponse, error)) *MockUserClientInterface_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// LogoutUser provides a mock function with given fields: ctx, userID
func (_m *MockUserClientInterface) LogoutUser(ctx context.Context, userID string) (*emptypb.Empty, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for LogoutUser")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*emptypb.Empty, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *emptypb.Empty); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_LogoutUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogoutUser'
type MockUserClientInterface_LogoutUser_Call struct {
	*mock.Call
}

// LogoutUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserClientInterface_Expecter) LogoutUser(ctx interface{}, userID interface{}) *MockUserClientInterface_LogoutUser_Call {
	return &MockUserClientInterface_LogoutUser_Call{Call: _e.mock.On("LogoutUser", ctx, userID)}
}

func (_c *MockUserClientInterface_LogoutUser_Call) Run(run func(ctx context.Context, userID string)) *MockUserClientInterface_LogoutUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserClientInterface_LogoutUser_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserClientInterface_LogoutUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_LogoutUser_Call) RunAndReturn(run func(context.Context, string) (*emptypb.Empty, error)) *MockUserClientInterface_LogoutUser_Call {
	_c.Call.Return(run)
	return _c
}

// MakeAdmin provides a mock function with given fields: ctx, user_id, admin_user_id
func (_m *MockUserClientInterface) MakeAdmin(ctx context.Context, user_id string, admin_user_id string) (*emptypb.Empty, error) {
	ret := _m.Called(ctx, user_id, admin_user_id)

	if len(ret) == 0 {
		panic("no return value specified for MakeAdmin")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*emptypb.Empty, error)); ok {
		return rf(ctx, user_id, admin_user_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *emptypb.Empty); ok {
		r0 = rf(ctx, user_id, admin_user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, user_id, admin_user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_MakeAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeAdmin'
type MockUserClientInterface_MakeAdmin_Call struct {
	*mock.Call
}

// MakeAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - user_id string
//   - admin_user_id string
func (_e *MockUserClientInterface_Expecter) MakeAdmin(ctx interface{}, user_id interface{}, admin_user_id interface{}) *MockUserClientInterface_MakeAdmin_Call {
	return &MockUserClientInterface_MakeAdmin_Call{Call: _e.mock.On("MakeAdmin", ctx, user_id, admin_user_id)}
}

func (_c *MockUserClientInterface_MakeAdmin_Call) Run(run func(ctx context.Context, user_id string, admin_user_id string)) *MockUserClientInterface_MakeAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserClientInterface_MakeAdmin_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserClientInterface_MakeAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_MakeAdmin_Call) RunAndReturn(run func(context.Context, string, string) (*emptypb.Empty, error)) *MockUserClientInterface_MakeAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, name, email, password
func (_m *MockUserClientInterface) RegisterUser(ctx context.Context, name string, email string, password string) (*user.UserResponse, error) {
	ret := _m.Called(ctx, name, email, password)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *user.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*user.UserResponse, error)); ok {
		return rf(ctx, name, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *user.UserResponse); ok {
		r0 = rf(ctx, name, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockUserClientInterface_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - email string
//   - password string
func (_e *MockUserClientInterface_Expecter) RegisterUser(ctx interface{}, name interface{}, email interface{}, password interface{}) *MockUserClientInterface_RegisterUser_Call {
	return &MockUserClientInterface_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, name, email, password)}
}

func (_c *MockUserClientInterface_RegisterUser_Call) Run(run func(ctx context.Context, name string, email string, password string)) *MockUserClientInterface_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUserClientInterface_RegisterUser_Call) Return(_a0 *user.UserResponse, _a1 error) *MockUserClientInterface_RegisterUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_RegisterUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*user.UserResponse, error)) *MockUserClientInterface_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAdmin provides a mock function with given fields: ctx, user_id, admin_user_id
func (_m *MockUserClientInterface) RemoveAdmin(ctx context.Context, user_id string, admin_user_id string) (*emptypb.Empty, error) {
	ret := _m.Called(ctx, user_id, admin_user_id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAdmin")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*emptypb.Empty, error)); ok {
		return rf(ctx, user_id, admin_user_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *emptypb.Empty); ok {
		r0 = rf(ctx, user_id, admin_user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, user_id, admin_user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_RemoveAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAdmin'
type MockUserClientInterface_RemoveAdmin_Call struct {
	*mock.Call
}

// RemoveAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - user_id string
//   - admin_user_id string
func (_e *MockUserClientInterface_Expecter) RemoveAdmin(ctx interface{}, user_id interface{}, admin_user_id interface{}) *MockUserClientInterface_RemoveAdmin_Call {
	return &MockUserClientInterface_RemoveAdmin_Call{Call: _e.mock.On("RemoveAdmin", ctx, user_id, admin_user_id)}
}

func (_c *MockUserClientInterface_RemoveAdmin_Call) Run(run func(ctx context.Context, user_id string, admin_user_id string)) *MockUserClientInterface_RemoveAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserClientInterface_RemoveAdmin_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserClientInterface_RemoveAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_RemoveAdmin_Call) RunAndReturn(run func(context.Context, string, string) (*emptypb.Empty, error)) *MockUserClientInterface_RemoveAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIntersectionID provides a mock function with given fields: ctx, userID, intersectionID
func (_m *MockUserClientInterface) RemoveIntersectionID(ctx context.Context, userID string, intersectionID string) (*emptypb.Empty, error) {
	ret := _m.Called(ctx, userID, intersectionID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIntersectionID")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*emptypb.Empty, error)); ok {
		return rf(ctx, userID, intersectionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *emptypb.Empty); ok {
		r0 = rf(ctx, userID, intersectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, intersectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_RemoveIntersectionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIntersectionID'
type MockUserClientInterface_RemoveIntersectionID_Call struct {
	*mock.Call
}

// RemoveIntersectionID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - intersectionID string
func (_e *MockUserClientInterface_Expecter) RemoveIntersectionID(ctx interface{}, userID interface{}, intersectionID interface{}) *MockUserClientInterface_RemoveIntersectionID_Call {
	return &MockUserClientInterface_RemoveIntersectionID_Call{Call: _e.mock.On("RemoveIntersectionID", ctx, userID, intersectionID)}
}

func (_c *MockUserClientInterface_RemoveIntersectionID_Call) Run(run func(ctx context.Context, userID string, intersectionID string)) *MockUserClientInterface_RemoveIntersectionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserClientInterface_RemoveIntersectionID_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserClientInterface_RemoveIntersectionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_RemoveIntersectionID_Call) RunAndReturn(run func(context.Context, string, string) (*emptypb.Empty, error)) *MockUserClientInterface_RemoveIntersectionID_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIntersectionIDs provides a mock function with given fields: ctx, userID, intersectionIDs
func (_m *MockUserClientInterface) RemoveIntersectionIDs(ctx context.Context, userID string, intersectionIDs []string) (*emptypb.Empty, error) {
	ret := _m.Called(ctx, userID, intersectionIDs)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIntersectionIDs")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (*emptypb.Empty, error)); ok {
		return rf(ctx, userID, intersectionIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) *emptypb.Empty); ok {
		r0 = rf(ctx, userID, intersectionIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, userID, intersectionIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_RemoveIntersectionIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIntersectionIDs'
type MockUserClientInterface_RemoveIntersectionIDs_Call struct {
	*mock.Call
}

// RemoveIntersectionIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - intersectionIDs []string
func (_e *MockUserClientInterface_Expecter) RemoveIntersectionIDs(ctx interface{}, userID interface{}, intersectionIDs interface{}) *MockUserClientInterface_RemoveIntersectionIDs_Call {
	return &MockUserClientInterface_RemoveIntersectionIDs_Call{Call: _e.mock.On("RemoveIntersectionIDs", ctx, userID, intersectionIDs)}
}

func (_c *MockUserClientInterface_RemoveIntersectionIDs_Call) Run(run func(ctx context.Context, userID string, intersectionIDs []string)) *MockUserClientInterface_RemoveIntersectionIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockUserClientInterface_RemoveIntersectionIDs_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserClientInterface_RemoveIntersectionIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_RemoveIntersectionIDs_Call) RunAndReturn(run func(context.Context, string, []string) (*emptypb.Empty, error)) *MockUserClientInterface_RemoveIntersectionIDs_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: ctx, email
func (_m *MockUserClientInterface) ResetPassword(ctx context.Context, email string) (*emptypb.Empty, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*emptypb.Empty, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *emptypb.Empty); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockUserClientInterface_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserClientInterface_Expecter) ResetPassword(ctx interface{}, email interface{}) *MockUserClientInterface_ResetPassword_Call {
	return &MockUserClientInterface_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, email)}
}

func (_c *MockUserClientInterface_ResetPassword_Call) Run(run func(ctx context.Context, email string)) *MockUserClientInterface_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserClientInterface_ResetPassword_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserClientInterface_ResetPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_ResetPassword_Call) RunAndReturn(run func(context.Context, string) (*emptypb.Empty, error)) *MockUserClientInterface_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, user_id, name, email
func (_m *MockUserClientInterface) UpdateUser(ctx context.Context, user_id string, name string, email string) (*user.UserResponse, error) {
	ret := _m.Called(ctx, user_id, name, email)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *user.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*user.UserResponse, error)); ok {
		return rf(ctx, user_id, name, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *user.UserResponse); ok {
		r0 = rf(ctx, user_id, name, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, user_id, name, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClientInterface_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserClientInterface_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user_id string
//   - name string
//   - email string
func (_e *MockUserClientInterface_Expecter) UpdateUser(ctx interface{}, user_id interface{}, name interface{}, email interface{}) *MockUserClientInterface_UpdateUser_Call {
	return &MockUserClientInterface_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user_id, name, email)}
}

func (_c *MockUserClientInterface_UpdateUser_Call) Run(run func(ctx context.Context, user_id string, name string, email string)) *MockUserClientInterface_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUserClientInterface_UpdateUser_Call) Return(_a0 *user.UserResponse, _a1 error) *MockUserClientInterface_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClientInterface_UpdateUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*user.UserResponse, error)) *MockUserClientInterface_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserClientInterface creates a new instance of MockUserClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserClientInterface {
	mock := &MockUserClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
