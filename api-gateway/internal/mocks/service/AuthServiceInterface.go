// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/COS301-SE-2025/Swift-Signals/api-gateway/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthServiceInterface is an autogenerated mock type for the AuthServiceInterface type
type MockAuthServiceInterface struct {
	mock.Mock
}

type MockAuthServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthServiceInterface) EXPECT() *MockAuthServiceInterface_Expecter {
	return &MockAuthServiceInterface_Expecter{mock: &_m.Mock}
}

// LoginUser provides a mock function with given fields: ctx, req
func (_m *MockAuthServiceInterface) LoginUser(ctx context.Context, req model.LoginRequest) (model.LoginResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 model.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginRequest) (model.LoginResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginRequest) model.LoginResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceInterface_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type MockAuthServiceInterface_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req model.LoginRequest
func (_e *MockAuthServiceInterface_Expecter) LoginUser(ctx interface{}, req interface{}) *MockAuthServiceInterface_LoginUser_Call {
	return &MockAuthServiceInterface_LoginUser_Call{Call: _e.mock.On("LoginUser", ctx, req)}
}

func (_c *MockAuthServiceInterface_LoginUser_Call) Run(run func(ctx context.Context, req model.LoginRequest)) *MockAuthServiceInterface_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.LoginRequest))
	})
	return _c
}

func (_c *MockAuthServiceInterface_LoginUser_Call) Return(_a0 model.LoginResponse, _a1 error) *MockAuthServiceInterface_LoginUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceInterface_LoginUser_Call) RunAndReturn(run func(context.Context, model.LoginRequest) (model.LoginResponse, error)) *MockAuthServiceInterface_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// LogoutUser provides a mock function with given fields: ctx, token
func (_m *MockAuthServiceInterface) LogoutUser(ctx context.Context, token string) (model.LogoutResponse, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for LogoutUser")
	}

	var r0 model.LogoutResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.LogoutResponse, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.LogoutResponse); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(model.LogoutResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceInterface_LogoutUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogoutUser'
type MockAuthServiceInterface_LogoutUser_Call struct {
	*mock.Call
}

// LogoutUser is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockAuthServiceInterface_Expecter) LogoutUser(ctx interface{}, token interface{}) *MockAuthServiceInterface_LogoutUser_Call {
	return &MockAuthServiceInterface_LogoutUser_Call{Call: _e.mock.On("LogoutUser", ctx, token)}
}

func (_c *MockAuthServiceInterface_LogoutUser_Call) Run(run func(ctx context.Context, token string)) *MockAuthServiceInterface_LogoutUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthServiceInterface_LogoutUser_Call) Return(_a0 model.LogoutResponse, _a1 error) *MockAuthServiceInterface_LogoutUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceInterface_LogoutUser_Call) RunAndReturn(run func(context.Context, string) (model.LogoutResponse, error)) *MockAuthServiceInterface_LogoutUser_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, req
func (_m *MockAuthServiceInterface) RegisterUser(ctx context.Context, req model.RegisterRequest) (model.RegisterResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 model.RegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RegisterRequest) (model.RegisterResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RegisterRequest) model.RegisterResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.RegisterResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RegisterRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceInterface_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockAuthServiceInterface_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req model.RegisterRequest
func (_e *MockAuthServiceInterface_Expecter) RegisterUser(ctx interface{}, req interface{}) *MockAuthServiceInterface_RegisterUser_Call {
	return &MockAuthServiceInterface_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, req)}
}

func (_c *MockAuthServiceInterface_RegisterUser_Call) Run(run func(ctx context.Context, req model.RegisterRequest)) *MockAuthServiceInterface_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.RegisterRequest))
	})
	return _c
}

func (_c *MockAuthServiceInterface_RegisterUser_Call) Return(_a0 model.RegisterResponse, _a1 error) *MockAuthServiceInterface_RegisterUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceInterface_RegisterUser_Call) RunAndReturn(run func(context.Context, model.RegisterRequest) (model.RegisterResponse, error)) *MockAuthServiceInterface_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthServiceInterface creates a new instance of MockAuthServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthServiceInterface {
	mock := &MockAuthServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
