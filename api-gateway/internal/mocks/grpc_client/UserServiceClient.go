// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	user "github.com/COS301-SE-2025/Swift-Signals/protos/gen/user"
)

// MockUserServiceClient is an autogenerated mock type for the UserServiceClient type
type MockUserServiceClient struct {
	mock.Mock
}

type MockUserServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserServiceClient) EXPECT() *MockUserServiceClient_Expecter {
	return &MockUserServiceClient_Expecter{mock: &_m.Mock}
}

// AddIntersectionID provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) AddIntersectionID(ctx context.Context, in *user.AddIntersectionIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddIntersectionID")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.AddIntersectionIDRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.AddIntersectionIDRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.AddIntersectionIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_AddIntersectionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddIntersectionID'
type MockUserServiceClient_AddIntersectionID_Call struct {
	*mock.Call
}

// AddIntersectionID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.AddIntersectionIDRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) AddIntersectionID(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_AddIntersectionID_Call {
	return &MockUserServiceClient_AddIntersectionID_Call{Call: _e.mock.On("AddIntersectionID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_AddIntersectionID_Call) Run(run func(ctx context.Context, in *user.AddIntersectionIDRequest, opts ...grpc.CallOption)) *MockUserServiceClient_AddIntersectionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.AddIntersectionIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_AddIntersectionID_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserServiceClient_AddIntersectionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_AddIntersectionID_Call) RunAndReturn(run func(context.Context, *user.AddIntersectionIDRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockUserServiceClient_AddIntersectionID_Call {
	_c.Call.Return(run)
	return _c
}

// ChangePassword provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) ChangePassword(ctx context.Context, in *user.ChangePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.ChangePasswordRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.ChangePasswordRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.ChangePasswordRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type MockUserServiceClient_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.ChangePasswordRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) ChangePassword(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_ChangePassword_Call {
	return &MockUserServiceClient_ChangePassword_Call{Call: _e.mock.On("ChangePassword",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_ChangePassword_Call) Run(run func(ctx context.Context, in *user.ChangePasswordRequest, opts ...grpc.CallOption)) *MockUserServiceClient_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.ChangePasswordRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_ChangePassword_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserServiceClient_ChangePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_ChangePassword_Call) RunAndReturn(run func(context.Context, *user.ChangePasswordRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockUserServiceClient_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) DeleteUser(ctx context.Context, in *user.UserIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.UserIDRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.UserIDRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.UserIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserServiceClient_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.UserIDRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) DeleteUser(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_DeleteUser_Call {
	return &MockUserServiceClient_DeleteUser_Call{Call: _e.mock.On("DeleteUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_DeleteUser_Call) Run(run func(ctx context.Context, in *user.UserIDRequest, opts ...grpc.CallOption)) *MockUserServiceClient_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.UserIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_DeleteUser_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserServiceClient_DeleteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_DeleteUser_Call) RunAndReturn(run func(context.Context, *user.UserIDRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockUserServiceClient_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) GetAllUsers(ctx context.Context, in *user.GetAllUsersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[user.UserResponse], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 grpc.ServerStreamingClient[user.UserResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.GetAllUsersRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[user.UserResponse], error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.GetAllUsersRequest, ...grpc.CallOption) grpc.ServerStreamingClient[user.UserResponse]); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[user.UserResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.GetAllUsersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockUserServiceClient_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.GetAllUsersRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) GetAllUsers(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_GetAllUsers_Call {
	return &MockUserServiceClient_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_GetAllUsers_Call) Run(run func(ctx context.Context, in *user.GetAllUsersRequest, opts ...grpc.CallOption)) *MockUserServiceClient_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.GetAllUsersRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_GetAllUsers_Call) Return(_a0 grpc.ServerStreamingClient[user.UserResponse], _a1 error) *MockUserServiceClient_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_GetAllUsers_Call) RunAndReturn(run func(context.Context, *user.GetAllUsersRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[user.UserResponse], error)) *MockUserServiceClient_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) GetUserByEmail(ctx context.Context, in *user.GetUserByEmailRequest, opts ...grpc.CallOption) (*user.UserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *user.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.GetUserByEmailRequest, ...grpc.CallOption) (*user.UserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.GetUserByEmailRequest, ...grpc.CallOption) *user.UserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.GetUserByEmailRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserServiceClient_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.GetUserByEmailRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) GetUserByEmail(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_GetUserByEmail_Call {
	return &MockUserServiceClient_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_GetUserByEmail_Call) Run(run func(ctx context.Context, in *user.GetUserByEmailRequest, opts ...grpc.CallOption)) *MockUserServiceClient_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.GetUserByEmailRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_GetUserByEmail_Call) Return(_a0 *user.UserResponse, _a1 error) *MockUserServiceClient_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_GetUserByEmail_Call) RunAndReturn(run func(context.Context, *user.GetUserByEmailRequest, ...grpc.CallOption) (*user.UserResponse, error)) *MockUserServiceClient_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) GetUserByID(ctx context.Context, in *user.UserIDRequest, opts ...grpc.CallOption) (*user.UserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *user.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.UserIDRequest, ...grpc.CallOption) (*user.UserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.UserIDRequest, ...grpc.CallOption) *user.UserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.UserIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserServiceClient_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.UserIDRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) GetUserByID(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_GetUserByID_Call {
	return &MockUserServiceClient_GetUserByID_Call{Call: _e.mock.On("GetUserByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_GetUserByID_Call) Run(run func(ctx context.Context, in *user.UserIDRequest, opts ...grpc.CallOption)) *MockUserServiceClient_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.UserIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_GetUserByID_Call) Return(_a0 *user.UserResponse, _a1 error) *MockUserServiceClient_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_GetUserByID_Call) RunAndReturn(run func(context.Context, *user.UserIDRequest, ...grpc.CallOption) (*user.UserResponse, error)) *MockUserServiceClient_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserIntersectionIDs provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) GetUserIntersectionIDs(ctx context.Context, in *user.UserIDRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[user.IntersectionIDResponse], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIntersectionIDs")
	}

	var r0 grpc.ServerStreamingClient[user.IntersectionIDResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.UserIDRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[user.IntersectionIDResponse], error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.UserIDRequest, ...grpc.CallOption) grpc.ServerStreamingClient[user.IntersectionIDResponse]); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[user.IntersectionIDResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.UserIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_GetUserIntersectionIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserIntersectionIDs'
type MockUserServiceClient_GetUserIntersectionIDs_Call struct {
	*mock.Call
}

// GetUserIntersectionIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.UserIDRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) GetUserIntersectionIDs(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_GetUserIntersectionIDs_Call {
	return &MockUserServiceClient_GetUserIntersectionIDs_Call{Call: _e.mock.On("GetUserIntersectionIDs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_GetUserIntersectionIDs_Call) Run(run func(ctx context.Context, in *user.UserIDRequest, opts ...grpc.CallOption)) *MockUserServiceClient_GetUserIntersectionIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.UserIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_GetUserIntersectionIDs_Call) Return(_a0 grpc.ServerStreamingClient[user.IntersectionIDResponse], _a1 error) *MockUserServiceClient_GetUserIntersectionIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_GetUserIntersectionIDs_Call) RunAndReturn(run func(context.Context, *user.UserIDRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[user.IntersectionIDResponse], error)) *MockUserServiceClient_GetUserIntersectionIDs_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) LoginUser(ctx context.Context, in *user.LoginUserRequest, opts ...grpc.CallOption) (*user.LoginUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 *user.LoginUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.LoginUserRequest, ...grpc.CallOption) (*user.LoginUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.LoginUserRequest, ...grpc.CallOption) *user.LoginUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.LoginUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.LoginUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type MockUserServiceClient_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.LoginUserRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) LoginUser(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_LoginUser_Call {
	return &MockUserServiceClient_LoginUser_Call{Call: _e.mock.On("LoginUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_LoginUser_Call) Run(run func(ctx context.Context, in *user.LoginUserRequest, opts ...grpc.CallOption)) *MockUserServiceClient_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.LoginUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_LoginUser_Call) Return(_a0 *user.LoginUserResponse, _a1 error) *MockUserServiceClient_LoginUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_LoginUser_Call) RunAndReturn(run func(context.Context, *user.LoginUserRequest, ...grpc.CallOption) (*user.LoginUserResponse, error)) *MockUserServiceClient_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// LogoutUser provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) LogoutUser(ctx context.Context, in *user.UserIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LogoutUser")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.UserIDRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.UserIDRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.UserIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_LogoutUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogoutUser'
type MockUserServiceClient_LogoutUser_Call struct {
	*mock.Call
}

// LogoutUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.UserIDRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) LogoutUser(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_LogoutUser_Call {
	return &MockUserServiceClient_LogoutUser_Call{Call: _e.mock.On("LogoutUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_LogoutUser_Call) Run(run func(ctx context.Context, in *user.UserIDRequest, opts ...grpc.CallOption)) *MockUserServiceClient_LogoutUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.UserIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_LogoutUser_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserServiceClient_LogoutUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_LogoutUser_Call) RunAndReturn(run func(context.Context, *user.UserIDRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockUserServiceClient_LogoutUser_Call {
	_c.Call.Return(run)
	return _c
}

// MakeAdmin provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) MakeAdmin(ctx context.Context, in *user.AdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MakeAdmin")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.AdminRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.AdminRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.AdminRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_MakeAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeAdmin'
type MockUserServiceClient_MakeAdmin_Call struct {
	*mock.Call
}

// MakeAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.AdminRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) MakeAdmin(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_MakeAdmin_Call {
	return &MockUserServiceClient_MakeAdmin_Call{Call: _e.mock.On("MakeAdmin",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_MakeAdmin_Call) Run(run func(ctx context.Context, in *user.AdminRequest, opts ...grpc.CallOption)) *MockUserServiceClient_MakeAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.AdminRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_MakeAdmin_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserServiceClient_MakeAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_MakeAdmin_Call) RunAndReturn(run func(context.Context, *user.AdminRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockUserServiceClient_MakeAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) RegisterUser(ctx context.Context, in *user.RegisterUserRequest, opts ...grpc.CallOption) (*user.UserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *user.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.RegisterUserRequest, ...grpc.CallOption) (*user.UserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.RegisterUserRequest, ...grpc.CallOption) *user.UserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.RegisterUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockUserServiceClient_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.RegisterUserRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) RegisterUser(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_RegisterUser_Call {
	return &MockUserServiceClient_RegisterUser_Call{Call: _e.mock.On("RegisterUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_RegisterUser_Call) Run(run func(ctx context.Context, in *user.RegisterUserRequest, opts ...grpc.CallOption)) *MockUserServiceClient_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.RegisterUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_RegisterUser_Call) Return(_a0 *user.UserResponse, _a1 error) *MockUserServiceClient_RegisterUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_RegisterUser_Call) RunAndReturn(run func(context.Context, *user.RegisterUserRequest, ...grpc.CallOption) (*user.UserResponse, error)) *MockUserServiceClient_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAdmin provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) RemoveAdmin(ctx context.Context, in *user.AdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAdmin")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.AdminRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.AdminRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.AdminRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_RemoveAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAdmin'
type MockUserServiceClient_RemoveAdmin_Call struct {
	*mock.Call
}

// RemoveAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.AdminRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) RemoveAdmin(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_RemoveAdmin_Call {
	return &MockUserServiceClient_RemoveAdmin_Call{Call: _e.mock.On("RemoveAdmin",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_RemoveAdmin_Call) Run(run func(ctx context.Context, in *user.AdminRequest, opts ...grpc.CallOption)) *MockUserServiceClient_RemoveAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.AdminRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_RemoveAdmin_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserServiceClient_RemoveAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_RemoveAdmin_Call) RunAndReturn(run func(context.Context, *user.AdminRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockUserServiceClient_RemoveAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIntersectionIDs provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) RemoveIntersectionIDs(ctx context.Context, in *user.RemoveIntersectionIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIntersectionIDs")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.RemoveIntersectionIDRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.RemoveIntersectionIDRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.RemoveIntersectionIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_RemoveIntersectionIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIntersectionIDs'
type MockUserServiceClient_RemoveIntersectionIDs_Call struct {
	*mock.Call
}

// RemoveIntersectionIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.RemoveIntersectionIDRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) RemoveIntersectionIDs(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_RemoveIntersectionIDs_Call {
	return &MockUserServiceClient_RemoveIntersectionIDs_Call{Call: _e.mock.On("RemoveIntersectionIDs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_RemoveIntersectionIDs_Call) Run(run func(ctx context.Context, in *user.RemoveIntersectionIDRequest, opts ...grpc.CallOption)) *MockUserServiceClient_RemoveIntersectionIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.RemoveIntersectionIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_RemoveIntersectionIDs_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserServiceClient_RemoveIntersectionIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_RemoveIntersectionIDs_Call) RunAndReturn(run func(context.Context, *user.RemoveIntersectionIDRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockUserServiceClient_RemoveIntersectionIDs_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) ResetPassword(ctx context.Context, in *user.ResetPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.ResetPasswordRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.ResetPasswordRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.ResetPasswordRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockUserServiceClient_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.ResetPasswordRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) ResetPassword(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_ResetPassword_Call {
	return &MockUserServiceClient_ResetPassword_Call{Call: _e.mock.On("ResetPassword",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_ResetPassword_Call) Run(run func(ctx context.Context, in *user.ResetPasswordRequest, opts ...grpc.CallOption)) *MockUserServiceClient_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.ResetPasswordRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_ResetPassword_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserServiceClient_ResetPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_ResetPassword_Call) RunAndReturn(run func(context.Context, *user.ResetPasswordRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockUserServiceClient_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) UpdateUser(ctx context.Context, in *user.UpdateUserRequest, opts ...grpc.CallOption) (*user.UserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *user.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.UpdateUserRequest, ...grpc.CallOption) (*user.UserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.UpdateUserRequest, ...grpc.CallOption) *user.UserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.UpdateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserServiceClient_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user.UpdateUserRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) UpdateUser(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_UpdateUser_Call {
	return &MockUserServiceClient_UpdateUser_Call{Call: _e.mock.On("UpdateUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_UpdateUser_Call) Run(run func(ctx context.Context, in *user.UpdateUserRequest, opts ...grpc.CallOption)) *MockUserServiceClient_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user.UpdateUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_UpdateUser_Call) Return(_a0 *user.UserResponse, _a1 error) *MockUserServiceClient_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_UpdateUser_Call) RunAndReturn(run func(context.Context, *user.UpdateUserRequest, ...grpc.CallOption) (*user.UserResponse, error)) *MockUserServiceClient_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserServiceClient creates a new instance of MockUserServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserServiceClient {
	mock := &MockUserServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
