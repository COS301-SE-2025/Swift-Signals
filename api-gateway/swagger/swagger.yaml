basePath: /
definitions:
  model.CreateIntersectionRequest:
    properties:
      default_parameters:
        $ref: '#/definitions/model.SimulationParameters'
      details:
        properties:
          address:
            example: Corner of Foo and Bar
            type: string
          city:
            example: Pretoria
            type: string
          province:
            example: Gauteng
            type: string
        type: object
      name:
        example: My Intersection
        maxLength: 256
        type: string
      traffic_density:
        example: high
        type: string
    required:
    - default_parameters
    - name
    type: object
  model.CreateIntersectionResponse:
    properties:
      id:
        example: "2"
        type: string
    type: object
  model.Details:
    properties:
      address:
        example: Corner of Foo and Bar
        type: string
      city:
        example: Pretoria
        type: string
      province:
        example: Gauteng
        type: string
    type: object
  model.ErrorResponse:
    properties:
      code:
        example: 404
        type: integer
      message:
        example: resource not found
        type: string
    type: object
  model.GetAllUsersRequest:
    properties:
      page:
        example: 1
        minimum: 1
        type: integer
      page_size:
        example: 10
        maximum: 100
        minimum: 1
        type: integer
    required:
    - page
    - page_size
    type: object
  model.Intersection:
    properties:
      best_parameters:
        $ref: '#/definitions/model.OptimisationParameters'
      created_at:
        example: "2025-06-24T15:04:05Z"
        type: string
      current_parameters:
        $ref: '#/definitions/model.OptimisationParameters'
      default_parameters:
        $ref: '#/definitions/model.OptimisationParameters'
      details:
        $ref: '#/definitions/model.Details'
      id:
        example: "1"
        type: string
      last_run_at:
        example: "2025-06-24T15:04:05Z"
        type: string
      name:
        example: My Intersection
        type: string
      run_count:
        example: 7
        type: integer
      status:
        example: unoptimised
        type: string
      traffic_density:
        example: high
        type: string
    type: object
  model.Intersections:
    properties:
      intersections:
        items:
          $ref: '#/definitions/model.Intersection'
        type: array
    type: object
  model.LoginRequest:
    properties:
      email:
        example: testuser@example.com
        type: string
      password:
        example: testpass1234
        type: string
    required:
    - email
    - password
    type: object
  model.LoginResponse:
    properties:
      message:
        example: Login successful
        type: string
      token:
        example: header.payload.signature
        type: string
    type: object
  model.LogoutResponse:
    properties:
      message:
        example: Logout successful
        type: string
    type: object
  model.NodeType:
    enum:
    - PRIORITY
    - TRAFFIC_LIGHT
    type: string
    x-enum-varnames:
    - NodeTypePriority
    - NodeTypeTrafficLight
  model.OptimisationParameters:
    properties:
      optimisation_type:
        example: grid_search
        type: string
      simulation_parameters:
        $ref: '#/definitions/model.SimulationParameters'
    type: object
  model.Position:
    properties:
      speed:
        example: 50
        type: number
      time:
        example: 0
        type: integer
      x:
        example: 100
        type: number
      "y":
        example: 200
        type: number
    type: object
  model.RegisterRequest:
    properties:
      email:
        example: testuser@example.com
        type: string
      password:
        example: testpass1234
        maxLength: 64
        minLength: 8
        type: string
      username:
        example: tester
        maxLength: 32
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  model.RegisterResponse:
    properties:
      user_id:
        example: "1"
        type: string
    type: object
  model.ResetPasswordRequest:
    properties:
      email:
        example: user@example.com
        type: string
    required:
    - email
    type: object
  model.ResetPasswordResponse:
    properties:
      message:
        example: Password reset instructions sent to your email.
        type: string
    type: object
  model.SimulationConn:
    properties:
      from:
        example: node1
        type: string
      fromLane:
        example: 1
        type: integer
      tl:
        type: integer
      to:
        example: node2
        type: string
      toLane:
        example: 1
        type: integer
    type: object
  model.SimulationEdge:
    properties:
      from:
        example: node1
        type: string
      id:
        example: edge1
        type: string
      lanes:
        example: 2
        type: integer
      speed:
        example: 50
        type: number
      to:
        example: node2
        type: string
    type: object
  model.SimulationIntersection:
    properties:
      connections:
        items:
          $ref: '#/definitions/model.SimulationConn'
        type: array
      edges:
        items:
          $ref: '#/definitions/model.SimulationEdge'
        type: array
      nodes:
        items:
          $ref: '#/definitions/model.SimulationNode'
        type: array
      trafficLights:
        items:
          $ref: '#/definitions/model.SimulationTrafficLight'
        type: array
    type: object
  model.SimulationNode:
    properties:
      id:
        example: node1
        type: string
      type:
        allOf:
        - $ref: '#/definitions/model.NodeType'
        example: PRIORITY
      x:
        example: 100
        type: number
      "y":
        example: 200
        type: number
    type: object
  model.SimulationOutput:
    properties:
      intersection:
        $ref: '#/definitions/model.SimulationIntersection'
      vehicles:
        items:
          $ref: '#/definitions/model.SimulationVehicle'
        type: array
    type: object
  model.SimulationParameters:
    properties:
      green:
        example: 10
        minimum: 1
        type: integer
      intersection_type:
        example: t-junction
        type: string
      red:
        example: 6
        minimum: 1
        type: integer
      seed:
        example: 3247128304
        type: integer
      speed:
        example: 60
        minimum: 1
        type: integer
      yellow:
        example: 2
        minimum: 1
        type: integer
    required:
    - green
    - intersection_type
    - red
    - seed
    - speed
    - yellow
    type: object
  model.SimulationPhase:
    properties:
      duration:
        example: 30
        type: integer
      state:
        example: GREEN
        type: string
    type: object
  model.SimulationResponse:
    properties:
      output:
        $ref: '#/definitions/model.SimulationOutput'
      results:
        $ref: '#/definitions/model.SimulationResults'
    type: object
  model.SimulationResults:
    properties:
      average_speed:
        example: 50
        type: number
      average_travel_time:
        example: 300
        type: number
      average_waiting_time:
        example: 60
        type: number
      emergency_brakes:
        example: 5
        type: integer
      emergency_stops:
        example: 3
        type: integer
      generated_vehicles:
        example: 120
        type: integer
      near_collisions:
        example: 2
        type: integer
      total_travel_time:
        example: 30000
        type: number
      total_vehicles:
        example: 100
        type: integer
      total_waiting_time:
        example: 6000
        type: number
    type: object
  model.SimulationTrafficLight:
    properties:
      id:
        example: tl1
        type: string
      phases:
        items:
          $ref: '#/definitions/model.SimulationPhase'
        type: array
      type:
        example: FIXED
        type: string
    type: object
  model.SimulationVehicle:
    properties:
      id:
        example: vehicle1
        type: string
      positions:
        items:
          $ref: '#/definitions/model.Position'
        type: array
    type: object
  model.UpdateIntersectionRequest:
    properties:
      details:
        properties:
          address:
            example: Corner of Foo and Bar
            type: string
          city:
            example: Pretoria
            type: string
          province:
            example: Gauteng
            type: string
        type: object
      name:
        example: My Updated Intersection
        type: string
    type: object
  model.UpdateUserRequest:
    properties:
      email:
        example: user@example.com
        type: string
      username:
        example: newusername
        maxLength: 32
        minLength: 3
        type: string
    type: object
  model.User:
    properties:
      email:
        example: user@example.com
        type: string
      id:
        example: "1"
        type: string
      intersection_ids:
        example:
        - '[1'
        - "2"
        - 3]
        items:
          type: string
        type: array
      is_admin:
        example: false
        type: boolean
      username:
        example: johndoe
        type: string
    type: object
host: localhost:9090
info:
  contact:
    email: insideinsights2025@gmail.com
    name: Inside Insights Team
    url: https://swagger.io/
  description: This is the API Gateway for the Swift-Signals project, forwarding requests
    to backend gRPC microservices.
  termsOfService: http://example.com/terms/
  title: Authentication API Gateway
  version: "1.0"
paths:
  /admin/users:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of all users. Only accessible by admins.
      parameters:
      - description: Pagination options
        in: body
        name: getAllUsersRequest
        required: true
        schema:
          $ref: '#/definitions/model.GetAllUsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "403":
          description: Forbidden - Only admins can access this endpoint
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get All Users
      tags:
      - Admin
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user by their ID. Only accessible by admins.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User deleted successfully
        "403":
          description: Forbidden - Only admins can access this endpoint
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete User by ID
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: Retrieves a user by their ID. Only accessible by admins.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/model.User'
        "403":
          description: Forbidden - Only admins can access this endpoint
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get User by ID
      tags:
      - Admin
    patch:
      consumes:
      - application/json
      description: Updates a user's details by their ID. Only accessible by admins.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user details
        in: body
        name: updateUserRequest
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user details
          schema:
            $ref: '#/definitions/model.User'
        "403":
          description: Forbidden - Only admins can access this endpoint
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User by ID
      tags:
      - Admin
  /intersections:
    get:
      consumes:
      - application/json
      description: Retrieves all the intersections associated with the user.
      produces:
      - application/json
      responses:
        "200":
          description: Successful intersections retrieval
          schema:
            $ref: '#/definitions/model.Intersections'
        "401":
          description: 'Unauthorized: Token missing or invalid'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get All Intersections
      tags:
      - Intersections
    post:
      consumes:
      - application/json
      description: Creates a new intersection with the given arguments
      parameters:
      - description: Intersection information
        in: body
        name: createIntersectionRequest
        required: true
        schema:
          $ref: '#/definitions/model.CreateIntersectionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Intersection successfully created
          schema:
            $ref: '#/definitions/model.CreateIntersectionResponse'
        "400":
          description: Invalid request payload or missing fields
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: 'Unauthorized: Token missing or invalid'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Intersection
      tags:
      - Intersections
  /intersections/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes the intersection with the given ID.
      parameters:
      - description: Intersection ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: 'Unauthorized: Token missing or invalid'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: 'Not Found: Intersection does not exist'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Intersection
      tags:
      - Intersections
    get:
      consumes:
      - application/json
      description: Retrieves a single intersection by its unique identifier.
      parameters:
      - description: Intersection ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful intersection retrieval
          schema:
            $ref: '#/definitions/model.Intersection'
        "400":
          description: 'Bad Request: Invalid or missing ID parameter'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: 'Unauthorized: Token missing or invalid'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: 'Not Found: Intersection does not exist'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Intersection by ID
      tags:
      - Intersections
    patch:
      consumes:
      - application/json
      description: Partially updates fields of an existing intersection by ID.
      parameters:
      - description: Intersection ID
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UpdateIntersectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update
          schema:
            $ref: '#/definitions/model.Intersection'
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: 'Unauthorized: Token missing or invalid'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: 'Not Found: Intersection does not exist'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Intersection
      tags:
      - Intersections
  /intersections/{id}/optimise:
    get:
      consumes:
      - application/json
      description: Generates and returns optimised simulation data for a specific
        intersection.
      parameters:
      - description: Intersection ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful optimised simulation data retrieval
          schema:
            $ref: '#/definitions/model.SimulationResponse'
        "400":
          description: 'Bad Request: Invalid input parameters'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: 'Unauthorized: Token missing or invalid'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: 'Not Found: Intersection not found'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Optimised Simulation Data
      tags:
      - Simulation
  /intersections/{id}/simulate:
    get:
      consumes:
      - application/json
      description: Generates and returns simulation data for a specific intersection.
      parameters:
      - description: Intersection ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful simulation data retrieval
          schema:
            $ref: '#/definitions/model.SimulationResponse'
        "400":
          description: 'Bad Request: Invalid input parameters'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: 'Unauthorized: Token missing or invalid'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: 'Not Found: Intersection not found'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Simulation Data
      tags:
      - Simulation
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns an authentication token.
      parameters:
      - description: Login credentials
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "400":
          description: Invalid request payload or credentials
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: User Login
      tags:
      - Authentication
  /logout:
    post:
      consumes:
      - application/json
      description: Invalidates the user's session or token on the server-side.
      produces:
      - application/json
      responses:
        "200":
          description: Successful logout
          schema:
            $ref: '#/definitions/model.LogoutResponse'
        "401":
          description: 'Unauthorized: Token missing or invalid'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: User Logout
      tags:
      - Authentication
  /me:
    delete:
      description: Deletes the profile of the currently authenticated user.
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete User Profile
      tags:
      - Profile
    get:
      description: Retrieves the profile of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/model.User'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get User Profile
      tags:
      - Profile
    patch:
      consumes:
      - application/json
      description: Updates the profile of the currently authenticated user.
      parameters:
      - description: User profile data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User profile updated successfully
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: 'Bad request: Validation error'
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User Profile
      tags:
      - Profile
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user and returns an authentication token.
      parameters:
      - description: User registration details
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully registered
          schema:
            $ref: '#/definitions/model.RegisterResponse'
        "400":
          description: Invalid request payload or missing fields
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: User Registration
      tags:
      - Authentication
  /reset-password:
    post:
      consumes:
      - application/json
      description: Reset's a user's password in case they forgot it.
      parameters:
      - description: User Email
        in: body
        name: resetPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/model.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful password reset
          schema:
            $ref: '#/definitions/model.ResetPasswordResponse'
        "400":
          description: Invalid request payload or email
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Reset Password
      tags:
      - Authentication
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
