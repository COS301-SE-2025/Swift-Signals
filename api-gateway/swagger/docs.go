// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://example.com/terms/",
        "contact": {
            "name": "Inside Insights Team",
            "url": "https://swagger.io/",
            "email": "insideinsights2025@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/users": {
            "get": {
                "description": "Retrieves a paginated list of all users. Only accessible by admins.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get All Users",
                "parameters": [
                    {
                        "description": "Pagination options",
                        "name": "getAllUsersRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.GetAllUsersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.User"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Only admins can access this endpoint",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{id}": {
            "get": {
                "description": "Retrieves a user by their ID. Only accessible by admins.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get User by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Only admins can access this endpoint",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a user by their ID. Only accessible by admins.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete User by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "403": {
                        "description": "Forbidden - Only admins can access this endpoint",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a user's details by their ID. Only accessible by admins.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update User by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user details",
                        "name": "updateUserRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user details",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Only admins can access this endpoint",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/intersections": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all the intersections associated with the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Intersections"
                ],
                "summary": "Get All Intersections",
                "responses": {
                    "200": {
                        "description": "Successful intersections retrieval",
                        "schema": {
                            "$ref": "#/definitions/model.Intersections"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new intersection with the given arguments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Intersections"
                ],
                "summary": "Create Intersection",
                "parameters": [
                    {
                        "description": "Intersection information",
                        "name": "createIntersectionRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateIntersectionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Intersection successfully created",
                        "schema": {
                            "$ref": "#/definitions/model.CreateIntersectionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or missing fields",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/intersections/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a single intersection by its unique identifier.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Intersections"
                ],
                "summary": "Get Intersection by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Intersection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful intersection retrieval",
                        "schema": {
                            "$ref": "#/definitions/model.Intersection"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid or missing ID parameter",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found: Intersection does not exist",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes the intersection with the given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Intersections"
                ],
                "summary": "Delete Intersection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Intersection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found: Intersection does not exist",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Partially updates fields of an existing intersection by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Intersections"
                ],
                "summary": "Update Intersection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Intersection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateIntersectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful update",
                        "schema": {
                            "$ref": "#/definitions/model.Intersection"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found: Intersection does not exist",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticates a user and returns an authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "schema": {
                            "$ref": "#/definitions/model.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or credentials",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invalidates the user's session or token on the server-side.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Logout",
                "responses": {
                    "200": {
                        "description": "Successful logout",
                        "schema": {
                            "$ref": "#/definitions/model.LogoutResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Registers a new user and returns an authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Registration",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "registerRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully registered",
                        "schema": {
                            "$ref": "#/definitions/model.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or missing fields",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reset-password": {
            "post": {
                "description": "Reset's a user's password in case they forgot it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset Password",
                "parameters": [
                    {
                        "description": "User Email",
                        "name": "resetPasswordRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful password reset",
                        "schema": {
                            "$ref": "#/definitions/model.ResetPasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or email",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.CreateIntersectionRequest": {
            "type": "object",
            "required": [
                "default_parameters",
                "name"
            ],
            "properties": {
                "default_parameters": {
                    "$ref": "#/definitions/model.SimulationParameters"
                },
                "details": {
                    "type": "object",
                    "properties": {
                        "address": {
                            "type": "string",
                            "example": "Corner of Foo and Bar"
                        },
                        "city": {
                            "type": "string",
                            "example": "Pretoria"
                        },
                        "province": {
                            "type": "string",
                            "example": "Gauteng"
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 256,
                    "example": "My Intersection"
                },
                "traffic_density": {
                    "type": "string",
                    "example": "high"
                }
            }
        },
        "model.CreateIntersectionResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "2"
                }
            }
        },
        "model.Details": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "Corner of Foo and Bar"
                },
                "city": {
                    "type": "string",
                    "example": "Pretoria"
                },
                "province": {
                    "type": "string",
                    "example": "Gauteng"
                }
            }
        },
        "model.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 404
                },
                "message": {
                    "type": "string",
                    "example": "resource not found"
                }
            }
        },
        "model.GetAllUsersRequest": {
            "type": "object",
            "required": [
                "page",
                "page_size"
            ],
            "properties": {
                "page": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "page_size": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1,
                    "example": 10
                }
            }
        },
        "model.Intersection": {
            "type": "object",
            "properties": {
                "best_parameters": {
                    "$ref": "#/definitions/model.OptimisationParameters"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-06-24T15:04:05Z"
                },
                "current_parameters": {
                    "$ref": "#/definitions/model.OptimisationParameters"
                },
                "default_parameters": {
                    "$ref": "#/definitions/model.OptimisationParameters"
                },
                "details": {
                    "$ref": "#/definitions/model.Details"
                },
                "id": {
                    "type": "string",
                    "example": "1"
                },
                "last_run_at": {
                    "type": "string",
                    "example": "2025-06-24T15:04:05Z"
                },
                "name": {
                    "type": "string",
                    "example": "My Intersection"
                },
                "run_count": {
                    "type": "integer",
                    "example": 7
                },
                "status": {
                    "type": "string",
                    "example": "unoptimised"
                },
                "traffic_density": {
                    "type": "string",
                    "example": "high"
                }
            }
        },
        "model.Intersections": {
            "type": "object",
            "properties": {
                "intersections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Intersection"
                    }
                }
            }
        },
        "model.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "testuser@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "testpass1234"
                }
            }
        },
        "model.LoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Login successful"
                },
                "token": {
                    "type": "string",
                    "example": "header.payload.signature"
                }
            }
        },
        "model.LogoutResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Logout successful"
                }
            }
        },
        "model.OptimisationParameters": {
            "type": "object",
            "properties": {
                "optimisation_type": {
                    "type": "string",
                    "example": "grid_search"
                },
                "simulation_parameters": {
                    "$ref": "#/definitions/model.SimulationParameters"
                }
            }
        },
        "model.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "testuser@example.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "testpass1234"
                },
                "username": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 3,
                    "example": "tester"
                }
            }
        },
        "model.RegisterResponse": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string",
                    "example": "1"
                }
            }
        },
        "model.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "model.ResetPasswordResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Password reset instructions sent to your email."
                }
            }
        },
        "model.SimulationParameters": {
            "type": "object",
            "required": [
                "green",
                "intersection_type",
                "red",
                "seed",
                "speed",
                "yellow"
            ],
            "properties": {
                "green": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 10
                },
                "intersection_type": {
                    "type": "string",
                    "example": "t-junction"
                },
                "red": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 6
                },
                "seed": {
                    "type": "integer",
                    "example": 3247128304
                },
                "speed": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 60
                },
                "yellow": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 2
                }
            }
        },
        "model.UpdateIntersectionRequest": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "properties": {
                        "address": {
                            "type": "string",
                            "example": "Corner of Foo and Bar"
                        },
                        "city": {
                            "type": "string",
                            "example": "Pretoria"
                        },
                        "province": {
                            "type": "string",
                            "example": "Gauteng"
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "example": "My Updated Intersection"
                }
            }
        },
        "model.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "username": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 3,
                    "example": "newusername"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "1"
                },
                "intersection_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[1",
                        "2",
                        "3]"
                    ]
                },
                "is_admin": {
                    "type": "boolean",
                    "example": false
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9090",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Authentication API Gateway",
	Description:      "This is the API Gateway for the Swift-Signals project, forwarding requests to backend gRPC microservices.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
