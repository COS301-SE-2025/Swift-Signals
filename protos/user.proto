syntax = "proto3";

package swiftsignals.user;

import "google/protobuf/empty.proto";

option go_package = "protos/gen/user";

service UserService {
  rpc RegisterUser(RegisterUserRequest) returns (UserResponse);
  rpc LoginUser(LoginUserRequest) returns (AuthResponse);
  rpc LogoutUser(UserIDRequest) returns (google.protobuf.Empty);
  rpc ValidateUser(ValidateUserRequest) returns (ValidateUserResponse);
  
  rpc GetUserByID(UserIDRequest) returns (UserResponse);
  rpc GetUserByEmail(GetUserByEmailRequest) returns (UserResponse);
  rpc GetAllUsers(GetAllUsersRequest) returns (stream UserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UserResponse);
  rpc DeleteUser(UserIDRequest) returns (google.protobuf.Empty);

  rpc GetUserIntersectionIDs(UserIDRequest) returns (stream IntersectionIDResponse);
  rpc AddIntersectionID(AddIntersectionIDRequest) returns (google.protobuf.Empty);
  rpc RemoveIntersectionID(RemoveIntersectionIDRequest) returns (google.protobuf.Empty);

  rpc ChangePassword(ChangePasswordRequest) returns (google.protobuf.Empty);
  rpc ResetPassword(ResetPasswordRequest) returns (google.protobuf.Empty);

  rpc MakeAdmin(MakeAdminRequest) returns (google.protobuf.Empty);
  rpc RemoveAdmin(RemoveAdminRequest) returns (google.protobuf.Empty);
}

// Common Messages
message UserIDRequest {
  string user_id = 1;
}

// Authentication Messages
message RegisterUserRequest {
  string name = 1;
  string email = 2;
  string password = 3;
  repeated int32 intersection_ids = 4; // Optional initial intersection IDs
}

message LoginUserRequest {
  string email = 1;
  string password = 2;
}

message ValidateUserRequest {
  string token = 1;
}

message ValidateUserResponse {
  bool is_valid = 1;
  string user_id = 2;
}

// User CRUD Messages
message GetUserByEmailRequest {
  string email = 1;
}

message GetAllUsersRequest {
  int32 page = 1;
  int32 page_size = 2;
  string filter = 3; // Optional filter criteria
}

message UpdateUserRequest {
  string user_id = 1;
  string name = 2;
  string email = 3;
}

// Intersection ID Messages
message IntersectionIDResponse {
  int32 intersection_id = 1;
}

message AddIntersectionIDRequest {
  string user_id = 1;
  int32 intersection_id = 2;
}

message RemoveIntersectionIDRequest {
  string user_id = 1;
  repeated int32 intersection_id = 2;
}

// Password Management Messages
message ChangePasswordRequest {
  string user_id = 1;
  string current_password = 2;
  string new_password = 3;
}

message ResetPasswordRequest {
  string email = 1;
}

// Admin Management Messages
message MakeAdminRequest {
  string user_id = 1;
  string admin_user_id = 2; // ID of the user making the request
}

message RemoveAdminRequest {
  string user_id = 1;
  string admin_user_id = 2; // ID of the user making the request
}

// Response Messages
message UserResponse {
  string id = 1;
  string name = 2;
  string email = 3;
  bool is_admin = 4;
  repeated int32 intersection_ids = 5;
  int64 created_at = 6; // Unix timestamp
  int64 updated_at = 7; // Unix timestamp
}

message AuthResponse { 
  string token = 1;
  UserResponse user = 2; // Include user info in auth response
  int64 expires_at = 3; // Token expiration timestamp
}
