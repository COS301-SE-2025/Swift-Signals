// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: intersection.proto

package intersection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IntersectionService_CreateIntersection_FullMethodName  = "/swiftsignals.intersection.IntersectionService/CreateIntersection"
	IntersectionService_GetIntersection_FullMethodName     = "/swiftsignals.intersection.IntersectionService/GetIntersection"
	IntersectionService_GetAllIntersections_FullMethodName = "/swiftsignals.intersection.IntersectionService/GetAllIntersections"
	IntersectionService_UpdateIntersection_FullMethodName  = "/swiftsignals.intersection.IntersectionService/UpdateIntersection"
	IntersectionService_DeleteIntersection_FullMethodName  = "/swiftsignals.intersection.IntersectionService/DeleteIntersection"
	IntersectionService_PutOptimisation_FullMethodName     = "/swiftsignals.intersection.IntersectionService/PutOptimisation"
)

// IntersectionServiceClient is the client API for IntersectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type IntersectionServiceClient interface {
	CreateIntersection(ctx context.Context, in *CreateIntersectionRequest, opts ...grpc.CallOption) (*IntersectionResponse, error)
	GetIntersection(ctx context.Context, in *IntersectionIDRequest, opts ...grpc.CallOption) (*IntersectionResponse, error)
	GetAllIntersections(ctx context.Context, in *GetAllIntersectionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[IntersectionResponse], error)
	UpdateIntersection(ctx context.Context, in *UpdateIntersectionRequest, opts ...grpc.CallOption) (*IntersectionResponse, error)
	DeleteIntersection(ctx context.Context, in *IntersectionIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PutOptimisation(ctx context.Context, in *PutOptimisationRequest, opts ...grpc.CallOption) (*PutOptimisationResponse, error)
}

type intersectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntersectionServiceClient(cc grpc.ClientConnInterface) IntersectionServiceClient {
	return &intersectionServiceClient{cc}
}

func (c *intersectionServiceClient) CreateIntersection(ctx context.Context, in *CreateIntersectionRequest, opts ...grpc.CallOption) (*IntersectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntersectionResponse)
	err := c.cc.Invoke(ctx, IntersectionService_CreateIntersection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intersectionServiceClient) GetIntersection(ctx context.Context, in *IntersectionIDRequest, opts ...grpc.CallOption) (*IntersectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntersectionResponse)
	err := c.cc.Invoke(ctx, IntersectionService_GetIntersection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intersectionServiceClient) GetAllIntersections(ctx context.Context, in *GetAllIntersectionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[IntersectionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IntersectionService_ServiceDesc.Streams[0], IntersectionService_GetAllIntersections_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAllIntersectionsRequest, IntersectionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntersectionService_GetAllIntersectionsClient = grpc.ServerStreamingClient[IntersectionResponse]

func (c *intersectionServiceClient) UpdateIntersection(ctx context.Context, in *UpdateIntersectionRequest, opts ...grpc.CallOption) (*IntersectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntersectionResponse)
	err := c.cc.Invoke(ctx, IntersectionService_UpdateIntersection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intersectionServiceClient) DeleteIntersection(ctx context.Context, in *IntersectionIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IntersectionService_DeleteIntersection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intersectionServiceClient) PutOptimisation(ctx context.Context, in *PutOptimisationRequest, opts ...grpc.CallOption) (*PutOptimisationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutOptimisationResponse)
	err := c.cc.Invoke(ctx, IntersectionService_PutOptimisation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntersectionServiceServer is the server API for IntersectionService service.
// All implementations must embed UnimplementedIntersectionServiceServer
// for forward compatibility.
//
// Service definition
type IntersectionServiceServer interface {
	CreateIntersection(context.Context, *CreateIntersectionRequest) (*IntersectionResponse, error)
	GetIntersection(context.Context, *IntersectionIDRequest) (*IntersectionResponse, error)
	GetAllIntersections(*GetAllIntersectionsRequest, grpc.ServerStreamingServer[IntersectionResponse]) error
	UpdateIntersection(context.Context, *UpdateIntersectionRequest) (*IntersectionResponse, error)
	DeleteIntersection(context.Context, *IntersectionIDRequest) (*emptypb.Empty, error)
	PutOptimisation(context.Context, *PutOptimisationRequest) (*PutOptimisationResponse, error)
	mustEmbedUnimplementedIntersectionServiceServer()
}

// UnimplementedIntersectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntersectionServiceServer struct{}

func (UnimplementedIntersectionServiceServer) CreateIntersection(context.Context, *CreateIntersectionRequest) (*IntersectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntersection not implemented")
}
func (UnimplementedIntersectionServiceServer) GetIntersection(context.Context, *IntersectionIDRequest) (*IntersectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntersection not implemented")
}
func (UnimplementedIntersectionServiceServer) GetAllIntersections(*GetAllIntersectionsRequest, grpc.ServerStreamingServer[IntersectionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllIntersections not implemented")
}
func (UnimplementedIntersectionServiceServer) UpdateIntersection(context.Context, *UpdateIntersectionRequest) (*IntersectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntersection not implemented")
}
func (UnimplementedIntersectionServiceServer) DeleteIntersection(context.Context, *IntersectionIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIntersection not implemented")
}
func (UnimplementedIntersectionServiceServer) PutOptimisation(context.Context, *PutOptimisationRequest) (*PutOptimisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOptimisation not implemented")
}
func (UnimplementedIntersectionServiceServer) mustEmbedUnimplementedIntersectionServiceServer() {}
func (UnimplementedIntersectionServiceServer) testEmbeddedByValue()                             {}

// UnsafeIntersectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntersectionServiceServer will
// result in compilation errors.
type UnsafeIntersectionServiceServer interface {
	mustEmbedUnimplementedIntersectionServiceServer()
}

func RegisterIntersectionServiceServer(s grpc.ServiceRegistrar, srv IntersectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntersectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntersectionService_ServiceDesc, srv)
}

func _IntersectionService_CreateIntersection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntersectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntersectionServiceServer).CreateIntersection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntersectionService_CreateIntersection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntersectionServiceServer).CreateIntersection(ctx, req.(*CreateIntersectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntersectionService_GetIntersection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntersectionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntersectionServiceServer).GetIntersection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntersectionService_GetIntersection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntersectionServiceServer).GetIntersection(ctx, req.(*IntersectionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntersectionService_GetAllIntersections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllIntersectionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IntersectionServiceServer).GetAllIntersections(m, &grpc.GenericServerStream[GetAllIntersectionsRequest, IntersectionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntersectionService_GetAllIntersectionsServer = grpc.ServerStreamingServer[IntersectionResponse]

func _IntersectionService_UpdateIntersection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIntersectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntersectionServiceServer).UpdateIntersection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntersectionService_UpdateIntersection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntersectionServiceServer).UpdateIntersection(ctx, req.(*UpdateIntersectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntersectionService_DeleteIntersection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntersectionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntersectionServiceServer).DeleteIntersection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntersectionService_DeleteIntersection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntersectionServiceServer).DeleteIntersection(ctx, req.(*IntersectionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntersectionService_PutOptimisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutOptimisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntersectionServiceServer).PutOptimisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntersectionService_PutOptimisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntersectionServiceServer).PutOptimisation(ctx, req.(*PutOptimisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntersectionService_ServiceDesc is the grpc.ServiceDesc for IntersectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntersectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swiftsignals.intersection.IntersectionService",
	HandlerType: (*IntersectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIntersection",
			Handler:    _IntersectionService_CreateIntersection_Handler,
		},
		{
			MethodName: "GetIntersection",
			Handler:    _IntersectionService_GetIntersection_Handler,
		},
		{
			MethodName: "UpdateIntersection",
			Handler:    _IntersectionService_UpdateIntersection_Handler,
		},
		{
			MethodName: "DeleteIntersection",
			Handler:    _IntersectionService_DeleteIntersection_Handler,
		},
		{
			MethodName: "PutOptimisation",
			Handler:    _IntersectionService_PutOptimisation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllIntersections",
			Handler:       _IntersectionService_GetAllIntersections_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "intersection.proto",
}
